export class HashTable {
    constructor(size) {
      this.data = new Array(size);
    }
  
    /**
     * _hash property return the hash(index) depends upon the size of array
     * Time Complexity O(1)
     * @param {*} key
     * @returns
     */
  
    _hash(key) {
      let hash = 0;
      for (let i = 0; i < key.length; i++) {
        hash = (hash + key.charCodeAt(i) * i) % this.data.length;
      }
      return hash;
    }
  
    /**
     * set property stores the key and value on index generated by _hash method
     * Time Complexity O(1)
     * @param {*} key
     * @param {*} value
     */
  
    set(key, value) {
      const address = this._hash(key);
      if (!this.data[address]) {
        this.data[address] = [];
      }
      this.data[address].push([key, value]);
    }
  
    get(key) {
      const address = this._hash(key);
      const currentBucket = this.data[address];
      // collision resolution code Time Complexity O(n)
      if (currentBucket !== undefined) {
        for (let i = 0; i < currentBucket.length; i++) {
          if (currentBucket[i][0] === key) {
            return currentBucket[i][1];
          }
        }
      }
      return undefined;
    }
  }
  
  const hash = new HashTable(100);
  
  hash.set('grapes', 10);
  hash.set('apple', 20);
  hash.set('hii', 30);
  hash.set('by', 40);
  hash.set('jiwdfwefwe', 50);
  
  console.log(hash.get('grapes'));
  